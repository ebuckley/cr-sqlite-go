// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/service.proto

package api_v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ebuckley/crsqlite-go/gen/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChangeServiceName is the fully-qualified name of the ChangeService service.
	ChangeServiceName = "api.v1.ChangeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChangeServiceGetSchemaProcedure is the fully-qualified name of the ChangeService's GetSchema RPC.
	ChangeServiceGetSchemaProcedure = "/api.v1.ChangeService/GetSchema"
	// ChangeServiceGetSiteIDProcedure is the fully-qualified name of the ChangeService's GetSiteID RPC.
	ChangeServiceGetSiteIDProcedure = "/api.v1.ChangeService/GetSiteID"
	// ChangeServiceGetChangesProcedure is the fully-qualified name of the ChangeService's GetChanges
	// RPC.
	ChangeServiceGetChangesProcedure = "/api.v1.ChangeService/GetChanges"
	// ChangeServiceMergeChangesProcedure is the fully-qualified name of the ChangeService's
	// MergeChanges RPC.
	ChangeServiceMergeChangesProcedure = "/api.v1.ChangeService/MergeChanges"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	changeServiceServiceDescriptor            = v1.File_api_v1_service_proto.Services().ByName("ChangeService")
	changeServiceGetSchemaMethodDescriptor    = changeServiceServiceDescriptor.Methods().ByName("GetSchema")
	changeServiceGetSiteIDMethodDescriptor    = changeServiceServiceDescriptor.Methods().ByName("GetSiteID")
	changeServiceGetChangesMethodDescriptor   = changeServiceServiceDescriptor.Methods().ByName("GetChanges")
	changeServiceMergeChangesMethodDescriptor = changeServiceServiceDescriptor.Methods().ByName("MergeChanges")
)

// ChangeServiceClient is a client for the api.v1.ChangeService service.
type ChangeServiceClient interface {
	GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error)
	GetSiteID(context.Context, *connect.Request[v1.GetSiteIDRequest]) (*connect.Response[v1.GetSiteIDResponse], error)
	GetChanges(context.Context, *connect.Request[v1.GetChangesRequest]) (*connect.Response[v1.GetChangesResponse], error)
	MergeChanges(context.Context, *connect.Request[v1.MergeChangesRequest]) (*connect.Response[v1.MergeChangesResponse], error)
}

// NewChangeServiceClient constructs a client for the api.v1.ChangeService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChangeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChangeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &changeServiceClient{
		getSchema: connect.NewClient[v1.GetSchemaRequest, v1.GetSchemaResponse](
			httpClient,
			baseURL+ChangeServiceGetSchemaProcedure,
			connect.WithSchema(changeServiceGetSchemaMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSiteID: connect.NewClient[v1.GetSiteIDRequest, v1.GetSiteIDResponse](
			httpClient,
			baseURL+ChangeServiceGetSiteIDProcedure,
			connect.WithSchema(changeServiceGetSiteIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getChanges: connect.NewClient[v1.GetChangesRequest, v1.GetChangesResponse](
			httpClient,
			baseURL+ChangeServiceGetChangesProcedure,
			connect.WithSchema(changeServiceGetChangesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		mergeChanges: connect.NewClient[v1.MergeChangesRequest, v1.MergeChangesResponse](
			httpClient,
			baseURL+ChangeServiceMergeChangesProcedure,
			connect.WithSchema(changeServiceMergeChangesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// changeServiceClient implements ChangeServiceClient.
type changeServiceClient struct {
	getSchema    *connect.Client[v1.GetSchemaRequest, v1.GetSchemaResponse]
	getSiteID    *connect.Client[v1.GetSiteIDRequest, v1.GetSiteIDResponse]
	getChanges   *connect.Client[v1.GetChangesRequest, v1.GetChangesResponse]
	mergeChanges *connect.Client[v1.MergeChangesRequest, v1.MergeChangesResponse]
}

// GetSchema calls api.v1.ChangeService.GetSchema.
func (c *changeServiceClient) GetSchema(ctx context.Context, req *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error) {
	return c.getSchema.CallUnary(ctx, req)
}

// GetSiteID calls api.v1.ChangeService.GetSiteID.
func (c *changeServiceClient) GetSiteID(ctx context.Context, req *connect.Request[v1.GetSiteIDRequest]) (*connect.Response[v1.GetSiteIDResponse], error) {
	return c.getSiteID.CallUnary(ctx, req)
}

// GetChanges calls api.v1.ChangeService.GetChanges.
func (c *changeServiceClient) GetChanges(ctx context.Context, req *connect.Request[v1.GetChangesRequest]) (*connect.Response[v1.GetChangesResponse], error) {
	return c.getChanges.CallUnary(ctx, req)
}

// MergeChanges calls api.v1.ChangeService.MergeChanges.
func (c *changeServiceClient) MergeChanges(ctx context.Context, req *connect.Request[v1.MergeChangesRequest]) (*connect.Response[v1.MergeChangesResponse], error) {
	return c.mergeChanges.CallUnary(ctx, req)
}

// ChangeServiceHandler is an implementation of the api.v1.ChangeService service.
type ChangeServiceHandler interface {
	GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error)
	GetSiteID(context.Context, *connect.Request[v1.GetSiteIDRequest]) (*connect.Response[v1.GetSiteIDResponse], error)
	GetChanges(context.Context, *connect.Request[v1.GetChangesRequest]) (*connect.Response[v1.GetChangesResponse], error)
	MergeChanges(context.Context, *connect.Request[v1.MergeChangesRequest]) (*connect.Response[v1.MergeChangesResponse], error)
}

// NewChangeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChangeServiceHandler(svc ChangeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	changeServiceGetSchemaHandler := connect.NewUnaryHandler(
		ChangeServiceGetSchemaProcedure,
		svc.GetSchema,
		connect.WithSchema(changeServiceGetSchemaMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	changeServiceGetSiteIDHandler := connect.NewUnaryHandler(
		ChangeServiceGetSiteIDProcedure,
		svc.GetSiteID,
		connect.WithSchema(changeServiceGetSiteIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	changeServiceGetChangesHandler := connect.NewUnaryHandler(
		ChangeServiceGetChangesProcedure,
		svc.GetChanges,
		connect.WithSchema(changeServiceGetChangesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	changeServiceMergeChangesHandler := connect.NewUnaryHandler(
		ChangeServiceMergeChangesProcedure,
		svc.MergeChanges,
		connect.WithSchema(changeServiceMergeChangesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.ChangeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChangeServiceGetSchemaProcedure:
			changeServiceGetSchemaHandler.ServeHTTP(w, r)
		case ChangeServiceGetSiteIDProcedure:
			changeServiceGetSiteIDHandler.ServeHTTP(w, r)
		case ChangeServiceGetChangesProcedure:
			changeServiceGetChangesHandler.ServeHTTP(w, r)
		case ChangeServiceMergeChangesProcedure:
			changeServiceMergeChangesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChangeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChangeServiceHandler struct{}

func (UnimplementedChangeServiceHandler) GetSchema(context.Context, *connect.Request[v1.GetSchemaRequest]) (*connect.Response[v1.GetSchemaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ChangeService.GetSchema is not implemented"))
}

func (UnimplementedChangeServiceHandler) GetSiteID(context.Context, *connect.Request[v1.GetSiteIDRequest]) (*connect.Response[v1.GetSiteIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ChangeService.GetSiteID is not implemented"))
}

func (UnimplementedChangeServiceHandler) GetChanges(context.Context, *connect.Request[v1.GetChangesRequest]) (*connect.Response[v1.GetChangesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ChangeService.GetChanges is not implemented"))
}

func (UnimplementedChangeServiceHandler) MergeChanges(context.Context, *connect.Request[v1.MergeChangesRequest]) (*connect.Response[v1.MergeChangesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ChangeService.MergeChanges is not implemented"))
}
