// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file api/v1/service.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message api.v1.Change
 */
export class Change extends Message<Change> {
  /**
   * @generated from field: string table = 1;
   */
  table = "";

  /**
   * @generated from field: bytes pk = 2;
   */
  pk = new Uint8Array(0);

  /**
   * @generated from field: string cid = 3;
   */
  cid = "";

  /**
   * @generated from field: bytes val = 4;
   */
  val = new Uint8Array(0);

  /**
   * @generated from field: int64 col_version = 5;
   */
  colVersion = protoInt64.zero;

  /**
   * @generated from field: int64 db_version = 6;
   */
  dbVersion = protoInt64.zero;

  /**
   * @generated from field: bytes site_id = 7;
   */
  siteId = new Uint8Array(0);

  /**
   * @generated from field: int64 cl = 8;
   */
  cl = protoInt64.zero;

  /**
   * @generated from field: int64 seq = 9;
   */
  seq = protoInt64.zero;

  constructor(data?: PartialMessage<Change>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.Change";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "cid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "val", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "col_version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "db_version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "site_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "cl", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "seq", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Change {
    return new Change().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Change {
    return new Change().fromJsonString(jsonString, options);
  }

  static equals(a: Change | PlainMessage<Change> | undefined, b: Change | PlainMessage<Change> | undefined): boolean {
    return proto3.util.equals(Change, a, b);
  }
}

/**
 * @generated from message api.v1.GetChangesRequest
 */
export class GetChangesRequest extends Message<GetChangesRequest> {
  /**
   * @generated from field: int64 db_version = 1;
   */
  dbVersion = protoInt64.zero;

  /**
   * @generated from field: string site_id = 2;
   */
  siteId = "";

  constructor(data?: PartialMessage<GetChangesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetChangesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "db_version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "site_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangesRequest {
    return new GetChangesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangesRequest {
    return new GetChangesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangesRequest {
    return new GetChangesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangesRequest | PlainMessage<GetChangesRequest> | undefined, b: GetChangesRequest | PlainMessage<GetChangesRequest> | undefined): boolean {
    return proto3.util.equals(GetChangesRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetSiteIDResponse
 */
export class GetSiteIDResponse extends Message<GetSiteIDResponse> {
  /**
   * @generated from field: string site_id = 1;
   */
  siteId = "";

  constructor(data?: PartialMessage<GetSiteIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetSiteIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "site_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSiteIDResponse {
    return new GetSiteIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSiteIDResponse {
    return new GetSiteIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSiteIDResponse {
    return new GetSiteIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSiteIDResponse | PlainMessage<GetSiteIDResponse> | undefined, b: GetSiteIDResponse | PlainMessage<GetSiteIDResponse> | undefined): boolean {
    return proto3.util.equals(GetSiteIDResponse, a, b);
  }
}

/**
 * @generated from message api.v1.MergeChangesRequest
 */
export class MergeChangesRequest extends Message<MergeChangesRequest> {
  /**
   * @generated from field: repeated api.v1.Change changes = 1;
   */
  changes: Change[] = [];

  constructor(data?: PartialMessage<MergeChangesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MergeChangesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changes", kind: "message", T: Change, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MergeChangesRequest {
    return new MergeChangesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MergeChangesRequest {
    return new MergeChangesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MergeChangesRequest {
    return new MergeChangesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MergeChangesRequest | PlainMessage<MergeChangesRequest> | undefined, b: MergeChangesRequest | PlainMessage<MergeChangesRequest> | undefined): boolean {
    return proto3.util.equals(MergeChangesRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetChangesResponse
 */
export class GetChangesResponse extends Message<GetChangesResponse> {
  /**
   * @generated from field: repeated api.v1.Change changes = 1;
   */
  changes: Change[] = [];

  constructor(data?: PartialMessage<GetChangesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetChangesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changes", kind: "message", T: Change, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChangesResponse {
    return new GetChangesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChangesResponse {
    return new GetChangesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChangesResponse {
    return new GetChangesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetChangesResponse | PlainMessage<GetChangesResponse> | undefined, b: GetChangesResponse | PlainMessage<GetChangesResponse> | undefined): boolean {
    return proto3.util.equals(GetChangesResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetSiteIDRequest
 */
export class GetSiteIDRequest extends Message<GetSiteIDRequest> {
  constructor(data?: PartialMessage<GetSiteIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetSiteIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSiteIDRequest {
    return new GetSiteIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSiteIDRequest {
    return new GetSiteIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSiteIDRequest {
    return new GetSiteIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSiteIDRequest | PlainMessage<GetSiteIDRequest> | undefined, b: GetSiteIDRequest | PlainMessage<GetSiteIDRequest> | undefined): boolean {
    return proto3.util.equals(GetSiteIDRequest, a, b);
  }
}

/**
 * @generated from message api.v1.MergeChangesResponse
 */
export class MergeChangesResponse extends Message<MergeChangesResponse> {
  constructor(data?: PartialMessage<MergeChangesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.MergeChangesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MergeChangesResponse {
    return new MergeChangesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MergeChangesResponse {
    return new MergeChangesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MergeChangesResponse {
    return new MergeChangesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MergeChangesResponse | PlainMessage<MergeChangesResponse> | undefined, b: MergeChangesResponse | PlainMessage<MergeChangesResponse> | undefined): boolean {
    return proto3.util.equals(MergeChangesResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetSchemaRequest
 */
export class GetSchemaRequest extends Message<GetSchemaRequest> {
  constructor(data?: PartialMessage<GetSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchemaRequest {
    return new GetSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchemaRequest | PlainMessage<GetSchemaRequest> | undefined, b: GetSchemaRequest | PlainMessage<GetSchemaRequest> | undefined): boolean {
    return proto3.util.equals(GetSchemaRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetSchemaResponse
 */
export class GetSchemaResponse extends Message<GetSchemaResponse> {
  /**
   * @generated from field: string schema = 1;
   */
  schema = "";

  /**
   * @generated from field: uint64 version = 2;
   */
  version = protoInt64.zero;

  constructor(data?: PartialMessage<GetSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchemaResponse {
    return new GetSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchemaResponse | PlainMessage<GetSchemaResponse> | undefined, b: GetSchemaResponse | PlainMessage<GetSchemaResponse> | undefined): boolean {
    return proto3.util.equals(GetSchemaResponse, a, b);
  }
}

